import { Component, ChangeDetectionStrategy, signal } from '@angular/core';
import { Highlight } from 'ngx-highlightjs';

@Component({
  selector: 'app-error-discovery-slide',
  templateUrl: './error-discovery.slide.html',
  styleUrl: './error-discovery.slide.scss',
  imports: [Highlight],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ErrorDiscoverySlide {
  formBuilderBugs = signal(`// Bug #1 : Typo dans le nom du champ
this.form = this.fb.group({
  firstName: ['']
});

// Dans le component - typo qui passe la compilation ‚úÖ
const name = this.form.get('fistName')?.value;  // üí• Undefined en prod
// TypeScript dit : "Tout va bien !" üò±

// ========================================

// Bug #2 : Mauvais type de valeur
this.form = this.fb.group({
  age: [0]
});

// On met une string au lieu d'un number - compilation OK ‚úÖ
this.form.patchValue({ age: '25' });  // üí• Type incorrect en prod
// TypeScript dit : "Pas de probl√®me !" üò±

// ========================================

// Bug #3 : Champ supprim√© mais code oubli√©
this.form = this.fb.group({
  // middleName: [''],  <- Comment√©/supprim√©
  firstName: ['']
});

// Code mort qui compile ‚úÖ
const middle = this.form.get('middleName')?.value;  // üí• Undefined
console.log(middle.toUpperCase());  // üí•üí• Crash en prod !
// TypeScript dit : "RAS !" üò±`);

  solution = signal(`// Avec classes typ√©es : TypeScript d√©tecte TOUT ‚úÖ
enum UserFormFields {
  FIRST_NAME = 'firstName',
  AGE = 'age'
}

export class UserForm extends FormGroup {
  constructor() {
    super({
      [UserFormFields.FIRST_NAME]: new FormControl<string>(''),
      [UserFormFields.AGE]: new FormControl<number>(0)
    });
  }

  get firstName() {
    return this.get(UserFormFields.FIRST_NAME) as FormControl<string>;
  }
}

// Typo ? ‚ùå Erreur de compilation imm√©diate
const name = form.get(UserFormFields.FIST_NAME);  // ‚ùå N'existe pas !

// Mauvais type ? ‚ùå Erreur de compilation
form.patchValue({ age: '25' });  // ‚ùå Type 'string' incompatible !

// Champ supprim√© ? ‚ùå Tous les usages en erreur
const middle = form.middleName;  // ‚ùå Propri√©t√© inexistante !`);
}
