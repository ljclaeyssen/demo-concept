import { Component, ChangeDetectionStrategy, signal } from '@angular/core';
import { Highlight } from 'ngx-highlightjs';

@Component({
  selector: 'app-maintenance-slide',
  templateUrl: './maintenance.slide.html',
  styleUrl: './maintenance.slide.scss',
  imports: [Highlight],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MaintenanceSlide {
  formBuilderSteps = signal(`// T√¢che : Ajouter un champ "middleName" au formulaire

// 1Ô∏è‚É£ Modifier la cr√©ation du form (component.ts)
this.form = this.fb.group({
  firstName: ['', Validators.required],
  middleName: [''],  // ‚Üê Nouveau champ
  lastName: ['', Validators.required]
});

// 2Ô∏è‚É£ Ajouter dans le template (component.html)
<input formControlName="middleName" />

// 3Ô∏è‚É£ Modifier les interfaces de donn√©es (models.ts)
interface UserData {
  firstName: string;
  middleName?: string;  // ‚Üê Nouveau champ
  lastName: string;
}

// 4Ô∏è‚É£ Modifier les appels API (service.ts)
updateUser(data: UserData) {
  return this.http.post('/api/user', {
    firstName: data.firstName,
    middleName: data.middleName,  // ‚Üê √Ä ne pas oublier !
    lastName: data.lastName
  });
}

// 5Ô∏è‚É£ Mettre √† jour les tests (component.spec.ts)
it('should save middle name', () => {
  component.form.patchValue({
    firstName: 'John',
    middleName: 'Michael',  // ‚Üê Nouveau test
    lastName: 'Doe'
  });
});

// ‚ö†Ô∏è 5+ fichiers √† modifier manuellement
// ‚ö†Ô∏è Risque d'oublier un endroit = bug en prod`);

  typedFormSteps = signal(`// T√¢che : Ajouter un champ "middleName" au formulaire

// 1Ô∏è‚É£ Ajouter l'enum (user-form.enums.ts)
export enum UserFormFields {
  FIRST_NAME = 'firstName',
  MIDDLE_NAME = 'middleName',  // ‚Üê Nouveau champ
  LAST_NAME = 'lastName'
}

// 2Ô∏è‚É£ Ajouter dans la classe (user-form.ts)
export class UserForm extends FormGroup {
  constructor() {
    super({
      [UserFormFields.FIRST_NAME]: new FormControl<string>('', {
        nonNullable: true,
        validators: [Validators.required]
      }),
      [UserFormFields.MIDDLE_NAME]: new FormControl<string>('', {
        nonNullable: true
      }),  // ‚Üê Nouveau champ avec getter auto-g√©n√©r√©
      [UserFormFields.LAST_NAME]: new FormControl<string>('', {
        nonNullable: true,
        validators: [Validators.required]
      })
    });
  }

  get middleName() {
    return this.get(UserFormFields.MIDDLE_NAME) as FormControl<string>;
  }
}

// 3Ô∏è‚É£ Ajouter dans le template (component.html)
<input [formControl]="form.middleName" />

// ‚úÖ C'est tout ! TypeScript d√©tecte automatiquement :
//    - L'interface UserData est mise √† jour (getRawValue())
//    - Les tests cass√©s sont signal√©s
//    - Les appels API incomplets sont en erreur
// ‚úÖ Impossible d'oublier un endroit`);

  comparison = signal(`üìä Comparaison Maintenance

FormBuilder:
- 5+ fichiers √† modifier manuellement
- Risque d'oublier des endroits
- Tests manuels n√©cessaires
- Bugs d√©couverts en prod
- Temps : ~30 minutes

Classes typ√©es:
- 2 fichiers √† modifier
- TypeScript d√©tecte les oublis
- Tests compilent ou cassent
- Bugs impossibles
- Temps : ~5 minutes

üí° Gain : 6x plus rapide et sans risque !`);
}
